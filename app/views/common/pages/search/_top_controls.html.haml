-#
-# this is a partial for the top search controls.
-# which contain a text filter field and view controls.
-#
-# REQUIREMENTS
-#
-#   page_search_path must be defined.
-#
-# NOTES
-#
-#   because we are not using form_remote_tag, we eat the return key and trigger a click
-#   to the submit link.
-#
-#   if the contents of the search text field are empty, then the params get set to :remove
-#   instead of :add. ie params[:add] -> '/text/:text/'.
-#   The :text is replaced with params[:text] by the path parser.
-#

-#
-# options for text filter form
-#
- add_or_remove = "($('search_text_field').value ? 'add' : 'remove')+'=/text/:text/'"
- with = "#{add_or_remove}+'&'+FilterPath.encode()+'&'+Form.serialize($('page_search_form'))"
-# FIXME: current workaround: append Form.serialize (which is not needed here) to get a post request
- clear_filter_options = "'remove=/text/:text/'+'&'+FilterPath.encode()+'&'+Form.serialize($('page_search_form'))"
- key_pressed = "if (enterPressed(event)) {$('search_submit').click(); return false;}"

#page_search_table
  %div
    = spinner('view_toggle')
  %div.p
    = form_tag '', id: 'page_search_form', class: 'form-inline' do
      .input-group
        %span.input-group-btn
          = link_to icon_tag('tiny_clear'), page_search_path,
              remote: true,
              data: { with: clear_filter_options },
              class: 'btn btn-default btn-sm'
        = text_field_tag 'text', '', size: 40, id: 'search_text_field', onkeypress: key_pressed, placeholder: :search.t, class: 'form-control input-sm'
        %span.input-group-btn
          = link_to icon_tag('magnifier'), page_search_path,
              remote: true,
              data: { with: with },
              id: 'search_submit',
              class: 'btn btn-default btn-sm'
= focus_form 'page_search_form'
